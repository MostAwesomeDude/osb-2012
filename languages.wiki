<[autotemplate]
title={Practial Lessons from Exotic Languages}
[autotemplate]>

== Overview ==

==== Languages ====

* Forth
* Haskell
* Prolog

==== Concepts ====

* Factoring
* Higher-level operations

== Factoring ==

==== Concatenative Factoring ====

<[code][style=basic]
2 dup * dup * .
[code]>

<[code][style=basic]
: sq dup * ;
2 sq sq .
[code]>

==== Practical Factoring ====

<[code][style=basic,language=Python]
e = ('\x00' * (4 - len(e))) + e
n = ('\x00' * (4 - len(n))) + n
[code]>

<[code][style=basic,language=Python]
def f(x):
    return ('\x00' * (4 - len(x)) + x

e = f(e)
n = f(n)
[code]>

<[code][style=basic,language=Python]
def f(x):
    return x.rjust(4, '\x00')

e = f(e)
n = f(n)
[code]>

== Higher-level Operations ==

==== In Haskell ====

* @filter@
* @foldr@
* @map@

==== In C++ ====

* Folds
** @std::accumulate@
* Maps
** @std::for\_each@
** @std::transform@

==== C Example ====

<[code][style=basic,language=C]
[code]>

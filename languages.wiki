<[autotemplate]
title={Practical Lessons from Exotic Languages}
[autotemplate]>

\def\cpp{{C\nolinebreak[4]\hspace{-.05em}\raisebox{.4ex}{\tiny \bf ++}}}
\def\cs{{C\nolinebreak\hspace{-.05em}\raisebox{.3ex}{\small \bf $\sharp$}}}


== Overview ==

==== Me ====

* Programmer
* Dozens of languages
*<2> Current working set: Python, C, Haskell, Forth, JS, \cpp, Java, AS3, Scheme, Factor, Prolog, Perl

==== Your Languages ====

* Java
* C
* \cpp
* \cs
* Go

==== My Languages ====

* Forth
* Haskell
* Prolog

==== Other Languages ====

* ECMAScript (ActionScript, JavaScript), Lua
* Lisps (CL, Scheme)
* MLs (SML, Ocaml)
* PHP
* Python, Erlang

==== Concepts ====

* Factoring
* Higher-level operations
* Declarative design

== Factoring ==

==== What is factoring? ====

* '''To factor''': "to express a quantity as two or more separate quantities of like kind"
* To pull apart into '''smaller''', '''equivalent''' pieces

==== Concatenative Languages ====

* '''Concatenative''': At (nearly) any point, factoring is possible
* Stack-based
* Forth: Simplicity
* Joy: Purity
* Factor: Practicality

==== Concatenative Factoring ====

<[code][style=basic]
2 dup * dup * .
[code]>

<[code][style=basic]
: sq dup * ;
2 sq sq .
[code]>

<[code][style=basic]
: 1+ 1 + ;
: 2* 2 * ;
: 2/ 2 / ;
[code]>

==== More Concatenative Factoring ====

<[code][style=basic]
: decomp ( n -- )
  2
  begin  2dup dup * >=
  while  2dup /mod swap
    if   drop  1+ 1 or \ next odd number
    else -rot nip  dup .
    then
  repeat
  drop . ;
[code]>

<[code][style=basic]
: next-odd 1+ 1 or ;
: yank ( a b c -- c b ) -rot nip ;
: drop. drop . ;
: dup. dup . ;
: sq dup * ;
: decomp ( n -- )
  2 begin 2dup sq >=
  while 2dup /mod swap
    if drop next-odd else pin dup. then
  repeat drop. ;
[code]>

==== Practical Factoring ====

<[code][style=basic,language=Python]
e = ('\x00' * (4 - len(e))) + e
n = ('\x00' * (4 - len(n))) + n
[code]>

<[code][style=basic,language=Python]
def f(x):
    return ('\x00' * (4 - len(x))) + x

e = f(e)
n = f(n)
[code]>

<[code][style=basic,language=Python]
def f(x):
    return x.rjust(4, '\x00')

e = f(e)
n = f(n)
[code]>

==== When to Factor? ====

* Short answer: Always factor!
* Longer answer: Function calls are not free, but usually cheap
* "Premature optimization is the root of all evil"
* Always profile before inlining

== Higher-level Operations ==

==== Leveling Up ====

* '''First-class function''': A function that can be handled like any other value
* '''Higher-order function''': A function that takes other functions as parameters

==== Linguistic Support ====

* First-class functions (C, \cpp, \cs, Go)
* Sufficiently polymorphic types (Java, \cpp, \cs, Go)
* Java can hack around this; Google for @ILambda@ and despair
* Go has some of this in syntax, and some of this in interfaces

==== Common Operations ====

* Fold (catamorphic operator)
** @(a -> b -> a) -> [a] -> b@
* Map
** @(a -> b) -> [a] -> [b]@
* Filter
** @(a -> Bool) -> [a] -> [a]@
* Zip (convolved map)
** @[a] -> [b] -> [(a, b)]@
* Zip-with
** @(a -> b -> c) -> [a] -> [b] -> [c]@

==== In Functional Languages ====

* Haskell
** @foldr@, @foldl@
** @map@
** @filter@
** @zip@
** @zipWith@
* Python
** @reduce@
** @map@
** @filter@
** @zip@
* Scheme
** @fold-right@, @fold-left@
** @map@
** @filter@

==== In Imperative Languages ====

* \cpp
** Fold: @std::accumulate@
** Iteration: @std::for\_each@
** Map/zip-with: @std::transform@
** Filter: @std::remove@, @std::remove\_if@, @std::remove\_copy@, @std::remove\_copy\_if@
* \cs
** Fold: @IEnumerable<T>.Aggregate@
** Map: @IEnumerable<T>.Select@
** Filter: @IEnumerable<T>.Where@
** Zip-with: @IEnumerable<T>.Zip@

==== Don't Forget C! ====

<[code][style=basic,language=C]
void *bsearch(
    const void *key, const void *base, size_t count,
    size_t size,
    int (*compare)(const void *, const void *));
void qsort(
    void *base, size_t count, size_t size,
    int (*compare)(const void *, const void *));
[code]>

* Function pointers
* No type safety

== Declarative Design ==

==== Facts ====

* Constants
* Computed rarely
* Important but arbitrary
* Searchable through custom functions

==== Ad-hoc Constants ====

<[code][style=basic,language=Python]
AIR, STONE, GRASS, DIRT = range(4)
[code]>

* Freakin' constants, how do they work?

==== Classes of Facts ====

<[code][style=basic,language=Python]
class Block(object):

    def __init__(self, slot, name):
        self.slot = slot
        self.name = name

names = \["air", "stone", "grass", "dirt", ...\]

blocks = \[Block(slot, name)
           for slot, name in zip(xrange(256), names)\]

named_blocks = dict((block.name, block)
                    for block in blocks)
[code]>

* Note that ellipsis
* Maintainable? Maybe...
* 197 LoC for 90 objects

==== Databases, Done Dirt Cheap ====

<[code][style=basic,language=Python]
class Block(object):

    def __init__(self, slot, name, secondary=0):
        ...

class Item(object):

    def __init__(self, slot, name, secondary=0):
        ...
[code]>

* What's the difference, really?

==== Straight-up Reinvention of Wheels ====

<[code][style=basic,language=Python]
class Block(object):

    def __init__(self, slot, name, secondary=0,
                 drop=None, replace=0, ratio=1,
                 quantity=1, dim=16, breakable=True,
                 orientation=None):
        ...

# Torches are orientable and don't dim.
_add_block(Block(50, "torch",
           orientation=(None, 5, 4, 3, 2, 1), dim=0))
[code]>

* 793 LoC for 237 objects
* Ad-hoc queries
* Potato programming

==== Just For Comparison ====

<[code][style=basic,language=Prolog,title=Blocks in Prolog]
block(air, 0).
block(stone, 1).
block(grass, 2).
block(dirt, 3).
block(torch, 50).

dim(torch, 0) :- !.
dim(X, 16).
[code]>

* 379 LoC for 237 objects
* A 52\% code savings!
* Could be even more efficient with better clauses

==== Potato Programming ====

* Coined by r0ml
* Willful ignorance of libraries and a focus on DIY techniques
* "Doing it the hard way"
* Not necessarily slow, but definitely verbose
** And thus, difficult and buggy!
* "Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified bug-ridden slow implementation of half of Common Lisp."
* s/Common Lisp/Prolog/g

==== Embedded DSLs ====

* Prolog
** SWI-Prolog
* Datalog
* SQL
** SQLite
*** Chrome/Chromium
*** Firefox/Thunderbird
*** Bundled in PHP and Python
*** Available in C/\cpp, Java, \cs
*** Native port in \cs

==== I Have the Power! ====

* '''Declarative Programming''': Writing code by stating '''facts'''
* Things get done by deducing things from facts
* Examples
** Rule-based work flow
** Behavior-driven work flow
** Data-driven design

== Wrapping Up ==

==== Summary ====

* Exotic languages are awesome
* Imperative languages are practical
* Meet in the middle

==== Questions? ====

Special thanks to:

* People on @\#0x10c-dev@, @\#haskell@, @\#osu-lug@, and @\#python@ on Freenode
* Cory Kolbeck
* Ben Kero
* Spencer Krum

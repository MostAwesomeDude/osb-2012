<[autotemplate]
author={Corbin Simpson}
title={Lye: How a Musician Built a Music Box}
[autotemplate]>

== About ==

==== Me ====

* Musician
* Programmer
*<2-> !'''Lazy'''!

==== Audio ====

'''Audio''': Waveforms representing sound

Audio is not important today.

==== Music ====

'''Music''': Universal language representing audio generation

Lye generates large amounts of music from small amounts of music.

=== Goals ===

==== Video Game Composer Cycle ====

*<1-3> _blue_Get idea_
* _violet_Compose music_
*<-2> _blue_Arrange music_
* _violet_Transcribe music_
*<1> _red_Sequence music_
*<1> _violet_Compile music_
* Repeat

==== Expression ====

* Music by musicians, for musicians
* Lye '''cannot''' understand musical expression
* Lye '''can''' understand hints
* Lye also knows how to play different instruments
** Legato, staccato, sforzando
** Bends and glissandi

==== Playback ====

* Music box
* Aebersold
* BGM

==== Unoriginality ====

* '''Not''' breaking new ground
* Instead, be very good at a small set of things

== Implementation Choices ==

==== Language ====

* Haskell
** Pro: Clean, elegant code
** Pro: Terse, obviously correct algorithms
** Con: Stateful computations are hard
** Con: Awkward/underdocumented libraries (Trifecta, Haskore, SYB/Uniplate)
* Python
** Pro: Strong personal background
** Pro: Traditional patterns
** Con: Not Haskell

Winner: Python!

==== Data Flow ====

<<<lye-structure.pdf,scale=0.4>>>

=== Formats ===

==== Possible Formats ====

* MusicXML
* ABC
* Lilypond

==== MusicXML: Middle C ====

<[code][style=basic,language=XML,basicstyle=\tiny]
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML 3.0 Partwise//EN"
    "http://www.musicxml.org/dtds/partwise.dtd">
<score-partwise version="3.0">
  <part-list>
    <score-part id="P1">
      <part-name>Music</part-name>
    </score-part>
  </part-list>
  <part id="P1">
    <measure number="1">
      <attributes>
        <divisions>1</divisions>
        <key><fifths>0</fifths></key>
        <time>
          <beats>4</beats>
          <beat-type>4</beat-type>
        </time>
        <clef>
          <sign>G</sign>
          <line>2</line>
        </clef>
      </attributes>
      <note>
        <pitch>
          <step>C</step>
          <octave>4</octave>
        </pitch>
        <duration>4</duration>
        <type>whole</type>
      </note>
    </measure>
  </part>
</score-partwise>
[code]>

==== ABC: Cool Parts ====

<[code][style=basic,title=Middle C]
C
[code]>

<[code][style=basic,title=Tuplets]
(3ABA (3ABA (3ABA A
[code]>

==== ABC: Quirks ====

<[code][style=basic,title=Capitalized Octaves]
A B c d e
[code]>

<[code][style=basic,title=Odd Numbers for Dots]
b3
[code]>

<[code][style=basic,title=Tuplets and Slurs Share Syntax]
(3ABA (ABAB) A
[code]>

* Unstandardized!

==== Lilypond ====

<[code][style=basic,title=Middle C]
c'1
[code]>

<[code][style=basic,title=Relative]
\relative c' { c2 d4 e b'2 a r4 c, d e g f c d c1 }
[code]>

==== Parsers ====

* PEGs
* PyMeta
** EBNF
** Packrat
** Not a DSL (PyPEG, PyParsing)

==== Example Parser ====

<[code][style=basic,title=Lilypond Parsing Core,basicstyle=\tiny]
expr_chord    ::= <token "<"> <expr_note>+:ns <token ">"> => Chord(ns)
expr_drum     ::= <kit>:k <duration>?:d => SciNote(drum_notes\[k\], d, None)
expr_drums    ::= <token "\\\\drums"> <expr>:e => Drums(e)
expr_marker   ::= <open_slur> | <close_slur> | <measure> | <tie>
expr_music    ::= <token "{"> <expr>+:e <token "}"> => Music(e)
expr_note     ::= <pitch>:p <accidental>?:a <octave>?:o <duration>?:d
                => Note(p, a or 0, o or 0, d)
expr_relative ::= <token "\\\\relative"> <spaces> <pitch>:p <accidental>?
                  <octave>?:o <expr_music>:e
                => Relative(p, o or 0, e)
expr_rest     ::= <token "r"> <duration>?:d => Rest(d)
expr_times    ::= <token "\\\\times"> <spaces> <int>:n '/' <int>:d
                  <expr_music>:e
                => Times(Fraction(n, d), e)
expr_voices   ::= <token "<<"> <expr_music>+:es <token ">>"> => Voices(es)
expr ::= <expr_chord> | <expr_drum> | <expr_drums> | <expr_dynamic> |
         <expr_marker> | <expr_music> | <expr_note> | <expr_relative> |
         <expr_rest> | <expr_times> | <expr_voices>
[code]>

==== AST ====

<[code][style=basic,language=Python,title=AST Types,basicstyle=\tiny]
Chord = namedtuple("Chord", "notes")
Drums = namedtuple("Drums", "expr")
Duration = namedtuple("Duration", "length, dots")
Dynamic = namedtuple("Dynamic", "mark")
Music = namedtuple("Music", "exprs")
Note = namedtuple("Note", "pitch, accidental, octave, duration")
PitchBend = namedtuple("PitchBend", "offset, value")
Relative = namedtuple("Relative", "pitch, octave, expr")
Rest = namedtuple("Rest", "duration")
SciNote = namedtuple("SciNote", "pitch, duration, velocity")
Slur = namedtuple("Slur", "exprs")
Times = namedtuple("Times", "fraction, expr")
Voice = namedtuple("Voice", "exprs")
Voices = namedtuple("Voices", "exprs")
[code]>

==== Surprise\! It's a Compiler\! ====

* Lye '''compiles''' Lilypond to a meta-MIDI data structure
* AST-to-AST transformations

<[code][style=basic,language=Python,title=NoteTransformer]
class NoteTransformer(Visitor):
    """
    Turn Notes into SciNotes.
    """

    def visit_Note(self, note):
        number = pitch_to_number(note.pitch,
            note.accidental, note.octave)
        return (SciNote(number, note.duration, None),
            True)
[code]>

==== Wait, what, meta-MIDI? ====

* Information about MIDI data
* Could become actual MIDI data
* Lye $\rightarrow$ MIDI $\rightarrow$ FluidSynth MIDI API
*<2> Lye $\rightarrow$ FluidSynth Sequencer/Synth API

==== Marks ====

* Isolate repeated motifs into sections called '''marks'''
* Work on a per-mark basis
* @MarkedLyne@ separates mark management from lynes

==== Exporters ====

* Export a single section to a target
** FluidSynth
** MIDI file
* Separation of concerns

== Wrapping Up ==

==== What's Next? ====

* Tough expressions: Appogiaturi and acciaccaturi
* Direct MIDI transcription

==== Bonus: What I Learned Last Week! ====

* My API is pretty bad
* Haskell no longer considered harmful
* Wub Machine is open-source

==== Questions? ====

Special thanks to:

* Ben Kero
* Jerome Hirsch
* Sarah Craig
* Spencer Krum
